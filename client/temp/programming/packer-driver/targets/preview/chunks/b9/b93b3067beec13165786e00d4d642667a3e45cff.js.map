{"version":3,"sources":["file:///E:/CocosCreator/mario/ccc3.6_mario/client/assets/script/net/dataviewUtils.ts"],"names":["DataViewUtils","getHeadData","dataview","id","getInt16","server","router","getInt32","head","serverType","String","decoding","byteLength","result","count","i","hh","fromCharCode","JSON","parse","encoding","other","body","bodyObj","stringify","buffer","ArrayBuffer","length","DataView","setInt16","setInt32","code","charCodeAt"],"mappings":";;;8BAGqBA,a;;;;;;;;;;;;;;;;;;;AADrB;yBACqBA,a,GAAN,MAAMA,aAAN,CAAoB;AAE/B;AACJ;AACA;AACA;AAC6B,eAAXC,WAAW,CAACC,QAAD,EAA2B;AAChD;AACA,cAAIC,EAAE,GAAGD,QAAQ,CAACE,QAAT,CAAkB,CAAlB,CAAT;AACA,cAAIC,MAAM,GAAGH,QAAQ,CAACE,QAAT,CAAkB,CAAlB,CAAb;AACA,cAAIE,MAAM,GAAGJ,QAAQ,CAACK,QAAT,CAAkB,CAAlB,CAAb;AACA,cAAIC,IAAU,GAAG;AAAEL,YAAAA,EAAE,EAAEA,EAAN;AAAUM,YAAAA,UAAU,EAAEJ,MAAtB;AAA8BC,YAAAA,MAAM,EAAEI,MAAM,CAACJ,MAAD;AAA5C,WAAjB;AACA,iBAAOE,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AAC0B,eAARG,QAAQ,CAACT,QAAD,EAAqBU,UAArB,EAA8C;AAChE,cAAIC,MAAM,GAAG,EAAb;AACA;;AACA,cAAIC,KAAK,GAAG,CAAZ;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAApB,EAAgCG,CAAC,EAAjC,EAAqC;AACjC,gBAAID,KAAK,GAAG,CAAR,IAAaF,UAAjB,EAA6B;AACzB;AACH;;AACD,gBAAII,EAAE,GAAGd,QAAQ,CAACE,QAAT,CAAkBU,KAAK,GAAG,CAA1B,CAAT;AACAA,YAAAA,KAAK,IAAI,CAAT;AACAD,YAAAA,MAAM,IAAIH,MAAM,CAACO,YAAP,CAAoBD,EAApB,CAAV;AACH,WAX+D,CAYhE;;;AACA,iBAAOE,IAAI,CAACC,KAAL,CAAWN,MAAX,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAC0B,eAARO,QAAQ,CAACjB,EAAD,EAAaM,UAAb,EAAiCY,KAAjC,EAAgDC,IAAhD,EAAwE;AAC1F,cAAIC,OAAO,GAAGL,IAAI,CAACM,SAAL,CAAeF,IAAf,CAAd;AACA;;AACA,cAAIG,MAAmB,GAAG,IAAIC,WAAJ,CAAgBH,OAAO,CAACI,MAAR,GAAiB,CAAjB,GAAqB,CAArC,CAA1B;AACA,cAAIzB,QAAQ,GAAG,IAAI0B,QAAJ,CAAaH,MAAb,CAAf;AACA;;AACAvB,UAAAA,QAAQ,CAAC2B,QAAT,CAAkB,CAAlB,EAAqB1B,EAArB;AACA;;AACAD,UAAAA,QAAQ,CAAC2B,QAAT,CAAkB,CAAlB,EAAqBpB,UAArB;AACA;;AACAP,UAAAA,QAAQ,CAAC4B,QAAT,CAAkB,CAAlB,EAAqBT,KAArB;AACA;;AACA,cAAIP,KAAK,GAAG,CAAZ;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,OAAO,CAACI,MAA5B,EAAoCZ,CAAC,EAArC,EAAyC;AACrC,gBAAIgB,IAAI,GAAGR,OAAO,CAACS,UAAR,CAAmBjB,CAAnB,CAAX;AACAb,YAAAA,QAAQ,CAAC2B,QAAT,CAAkBf,KAAK,GAAG,CAA1B,EAA6BiB,IAA7B;AACAjB,YAAAA,KAAK,IAAI,CAAT;AACH;;AACD,iBAAOZ,QAAQ,CAACuB,MAAhB;AACH;;AA9D8B,O","sourcesContent":["import { Head } from \"./globalUtils\";\r\n\r\n/* 二进制数据处理 */\r\nexport default class DataViewUtils {\r\n\r\n    /**\r\n     * 获取消息头数据id,serverType,other\r\n     * @param dataview \r\n     */\r\n    public static getHeadData(dataview: DataView): Head {\r\n        /* 约定，消息头共8个字节，两个字节保存id,连个字节保存服务器类型，四个字节保存其他 */\r\n        let id = dataview.getInt16(0);\r\n        let server = dataview.getInt16(2);\r\n        let router = dataview.getInt32(4);\r\n        let head: Head = { id: id, serverType: server, router: String(router) };\r\n        return head;\r\n    }\r\n\r\n    /**\r\n     * 获取二进制数据消息体\r\n     * @param dataview \r\n     * @param byteLength \r\n     */\r\n    public static decoding(dataview: DataView, byteLength: number): any {\r\n        let result = \"\";\r\n        /* 约定，每个字符给两个字节空间存储数据 */\r\n        let count = 0;\r\n        for (let i = 0; i < byteLength; i++) {\r\n            if (count + 8 >= byteLength) {\r\n                break;\r\n            }\r\n            let hh = dataview.getInt16(count + 8);\r\n            count += 2;\r\n            result += String.fromCharCode(hh);\r\n        }\r\n        // console.log(result);\r\n        return JSON.parse(result);\r\n    }\r\n\r\n    /**\r\n     * 封装二进制数据\r\n     * @param id  唯一标示Id\r\n     * @param serverType 服务器类型\r\n     * @param other 其他\r\n     * @param body 消息体（JSON格式）\r\n     */\r\n    public static encoding(id: number, serverType: number, other: number, body: any): ArrayBuffer {\r\n        let bodyObj = JSON.stringify(body);\r\n        /* 考虑到中文，每个字符给两个字节空间存储数据 */\r\n        let buffer: ArrayBuffer = new ArrayBuffer(bodyObj.length * 2 + 8);\r\n        let dataview = new DataView(buffer);\r\n        /* 唯一标识id */\r\n        dataview.setInt16(0, id);\r\n        /* 服务器类型 */\r\n        dataview.setInt16(2, serverType);\r\n        /* 其他，可做验证，先留着 */\r\n        dataview.setInt32(4, other);\r\n        /* body消息体 */\r\n        let count = 0;\r\n        for (let i = 0; i < bodyObj.length; i++) {\r\n            let code = bodyObj.charCodeAt(i);\r\n            dataview.setInt16(count + 8, code);\r\n            count += 2;\r\n        }\r\n        return dataview.buffer;\r\n    }\r\n}"]}