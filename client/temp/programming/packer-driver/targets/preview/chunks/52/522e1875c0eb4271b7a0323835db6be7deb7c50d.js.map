{"version":3,"sources":["file:///E:/CocosCreator/mario/ccc3.6_mario/client/assets/script/framework/poolManager.ts"],"names":["_decorator","instantiate","NodePool","ccclass","property","PoolManager","_dictPool","_dictPrefab","Inst","_instance","getNode","prefab","parent","Promise","resove","name","node","hasOwnProperty","pool","size","get","console","log","active","setNode","put","clearPool","clear"],"mappings":"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","sourcesContent":["import { _decorator, Node, Prefab, instantiate, NodePool } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PoolManager')\r\nexport class PoolManager {\r\n    private _dictPool: any = {}\r\n    private _dictPrefab: any = {}\r\n    static _instance: PoolManager;\r\n\r\n    static get Inst() {\r\n        if (this._instance) {\r\n            return this._instance;\r\n        }\r\n\r\n        this._instance = new PoolManager();\r\n        return this._instance;\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据预设从对象池中获取对应节点\r\n     */\r\n    public async getNode(prefab: Prefab, parent: Node = null): Promise<Node> {\r\n        return new Promise(resove => {\r\n            let name = prefab.name;\r\n            this._dictPrefab[name] = prefab;\r\n            let node = null;\r\n            if (this._dictPool.hasOwnProperty(name)) {\r\n                //已有对应的对象池\r\n                let pool = this._dictPool[name];\r\n                if (pool.size() > 0) {\r\n                    node = pool.get();\r\n                } else {\r\n                    node = instantiate(prefab);\r\n                }\r\n            } else {\r\n                //没有对应对象池，创建他！\r\n                let pool = new NodePool();\r\n                this._dictPool[name] = pool;\r\n\r\n                node = instantiate(prefab);\r\n            }\r\n\r\n            if (parent) {\r\n                node.parent = parent;\r\n            }\r\n            if (!node) console.log('对象次获取对象异常');\r\n            node.active = true;\r\n            resove(node);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 将对应节点放回对象池中\r\n     */\r\n    public setNode(node: Node) {\r\n        if (!node) {\r\n            return;\r\n        }\r\n        let name = node.name;\r\n        let pool = null;\r\n        if (this._dictPool.hasOwnProperty(name)) {\r\n            //已有对应的对象池\r\n            pool = this._dictPool[name];\r\n        } else {\r\n            //没有对应对象池，创建他！\r\n            pool = new NodePool();\r\n            this._dictPool[name] = pool;\r\n        }\r\n\r\n        pool.put(node);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 根据名称，清除对应对象池\r\n     */\r\n    public clearPool(name: string) {\r\n        if (this._dictPool.hasOwnProperty(name)) {\r\n            let pool = this._dictPool[name];\r\n            pool.clear();\r\n        }\r\n    }\r\n\r\n    // public static handle = new Map<string, Node[]>();\r\n    // /**\r\n    //  * 获取\r\n    //  * @param prefab \r\n    //  */\r\n    // public static getNode(prefab: Prefab): Promise<Node> {\r\n    //     return new Promise(resolve => {\r\n    //         const name = prefab.name;\r\n    //         let node: Node = null;\r\n    //         if (this.handle.has(name)) {\r\n    //             node = this.handle.get(name)?.pop() as Node;\r\n    //         }\r\n    //         else {\r\n    //             node = instantiate(prefab) as Node;\r\n    //         }\r\n    //         if (!node) {\r\n    //             node = instantiate(prefab) as Node;\r\n    //         }\r\n    //         resolve(node);\r\n    //     });\r\n    // }\r\n\r\n    // /**\r\n    //  * 根据名字获取\r\n    //  * @param name string \r\n    //  */\r\n    // public static getNodeBy(namee: string): Node {\r\n    //     const name = namee;\r\n    //     let node: Node = null;\r\n    //     if (this.handle.has(name)) {\r\n    //         node = this.handle.get(name)?.pop() as Node;\r\n    //     }\r\n    //     return node;\r\n    // }\r\n\r\n\r\n\r\n    // /**\r\n    //  * 回收\r\n    //  * @param target \r\n    //  */\r\n    // public static setNode(target: Node) {\r\n    //     const name = target.name;\r\n    //     target.parent = null;\r\n    //     if (this.handle.has(name)) {\r\n    //         this.handle.get(name)?.push(target);\r\n    //     }\r\n    //     else {\r\n    //         this.handle.set(name, [target]);\r\n    //     }\r\n    // }\r\n}"]}