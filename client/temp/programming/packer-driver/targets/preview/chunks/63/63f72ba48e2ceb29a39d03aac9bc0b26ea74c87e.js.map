{"version":3,"sources":["file:///E:/CocosCreator/git/mario/client/assets/script/game/pieces/mushroom.ts"],"names":["_decorator","v3","tween","UITransformComponent","RigidBody2D","BoxCollider2D","ERigidBody2DType","Constant","baseCollider","ccclass","property","mushroom","_speed","_normalX","_isActive","_group","start","_addListener","_init","onDestroy","MoveSpeed","node","setScale","MapScale","bc","getComponent","group","_removePhysics","pos","getWorldPosition","height","setWorldPosition","x","y","z","to","worldPosition","call","_addPhysics","rb","type","Static","Dynamic","onBeginContact","selfCollider","otherCollider","contact","name1","name","name2","includes","normal","getWorldManifold","_evtMushroomMove","offset","update","deltaTime","getPosition","setPosition"],"mappings":";;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAA4DC,MAAAA,E,OAAAA,E;AAAIC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,oB,OAAAA,oB;AAAsBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,a,OAAAA,a;AAAqBC,MAAAA,gB,OAAAA,gB;;AAE/HC,MAAAA,Q,iBAAAA,Q;;AACAC,MAAAA,Y,iBAAAA,Y;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBV,U;;0BAGjBW,Q,WADZF,OAAO,CAAC,UAAD,C,gBAAR,MACaE,QADb;AAAA;AAAA,wCAC2C;AAAA;AAAA;AAAA,eAC/BC,MAD+B,GACd,CADc;AAAA,eAE/BC,QAF+B,GAEZ,CAFY;AAAA,eAG/BC,SAH+B,GAGV,KAHU;AAAA,eAI/BC,MAJ+B,GAId,CAJc;AAAA;;AAKvCC,QAAAA,KAAK,GAAG;AACJ,gBAAMA,KAAN;;AACA,eAAKC,YAAL;;AACA,eAAKC,KAAL;AACH;;AACOD,QAAAA,YAAY,GAAG,CACtB;;AAEDE,QAAAA,SAAS,GAAG,CACX;;AAEOD,QAAAA,KAAK,GAAG;AACZ,eAAKN,MAAL,GAAc;AAAA;AAAA,oCAASQ,SAAT,GAAqB,CAAnC;AACA,eAAKC,IAAL,CAAUC,QAAV,CAAmBrB,EAAE,CAAC;AAAA;AAAA,oCAASsB,QAAV,EAAoB;AAAA;AAAA,oCAASA,QAA7B,EAAuC,CAAvC,CAArB;AACA,cAAIC,EAAE,GAAG,KAAKH,IAAL,CAAUI,YAAV,CAAuBpB,aAAvB,CAAT;AACA,eAAKU,MAAL,GAAcS,EAAE,CAACE,KAAjB;;AACA,eAAKC,cAAL;;AACA,cAAIC,GAAG,GAAG,KAAKP,IAAL,CAAUQ,gBAAV,EAAV;AACA,cAAIC,MAAM,GAAG,KAAKT,IAAL,CAAUI,YAAV,CAAuBtB,oBAAvB,EAA6C2B,MAA7C,GAAsD;AAAA;AAAA,oCAASP,QAA5E;AACA,eAAKF,IAAL,CAAUU,gBAAV,CAA2B9B,EAAE,CAAC2B,GAAG,CAACI,CAAL,EAAQJ,GAAG,CAACK,CAAJ,GAASH,MAAM,GAAG;AAAA;AAAA,oCAASP,QAAnC,EAA8CK,GAAG,CAACM,CAAlD,CAA7B;AACAN,UAAAA,GAAG,GAAG,KAAKP,IAAL,CAAUQ,gBAAV,EAAN;AACA,eAAKR,IAAL,CAAUU,gBAAV,CAA2B9B,EAAE,CAAC2B,GAAG,CAACI,CAAL,EAAQJ,GAAG,CAACK,CAAJ,GAASH,MAAjB,EAA0BF,GAAG,CAACM,CAA9B,CAA7B,EAVY,CAWZ;;AAEAhC,UAAAA,KAAK,CAAC,KAAKmB,IAAN,CAAL,CAAiBc,EAAjB,CAAoB,CAApB,EAAuB;AAAEC,YAAAA,aAAa,EAAEnC,EAAE,CAAC2B,GAAG,CAACI,CAAL,EAAQJ,GAAG,CAACK,CAAZ,EAAeL,GAAG,CAACM,CAAnB;AAAnB,WAAvB,EAAmEG,IAAnE,CAAwE,MAAM;AAC1E,iBAAKC,WAAL;AACH,WAFD,EAEGtB,KAFH;AAGH;;AAEOW,QAAAA,cAAc,GAAG;AACrB,cAAIY,EAAE,GAAG,KAAKlB,IAAL,CAAUI,YAAV,CAAuBrB,WAAvB,CAAT;AACAmC,UAAAA,EAAE,CAACC,IAAH,GAAUlC,gBAAgB,CAACmC,MAA3B;AACH;;AAEOH,QAAAA,WAAW,GAAG;AAClB,cAAIC,EAAE,GAAG,KAAKlB,IAAL,CAAUI,YAAV,CAAuBrB,WAAvB,CAAT;AACAmC,UAAAA,EAAE,CAACC,IAAH,GAAUlC,gBAAgB,CAACoC,OAA3B;AACA,eAAK5B,SAAL,GAAiB,IAAjB;AACH;;AAEM6B,QAAAA,cAAc,CAACC,YAAD,EAA2BC,aAA3B,EAAsDC,OAAtD,EAAyF;AAC1G;AACA,cAAIC,KAAK,GAAGH,YAAY,CAACvB,IAAb,CAAkB2B,IAA9B;AACA,cAAIC,KAAK,GAAGJ,aAAa,CAACxB,IAAd,CAAmB2B,IAA/B;;AACA,cAAID,KAAK,CAACG,QAAN,CAAe,UAAf,CAAJ,EAAgC;AAC5B,gBAAIC,MAAM,GAAGL,OAAO,CAACM,gBAAR,GAA2BD,MAAxC;;AACA,iBAAKE,gBAAL,CAAsBF,MAAM,CAACnB,CAA7B;AACH;AACJ;;AAEOqB,QAAAA,gBAAgB,CAACC,MAAD,EAAiB;AACrC,cAAIA,MAAM,IAAI,KAAKzC,QAAnB,EAA6B;AACzB,iBAAKD,MAAL,IAAe,CAAC,CAAhB;AACA,iBAAKC,QAAL,GAAgByC,MAAhB;AACH;AACJ;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB;AACtB,cAAI,CAAC,KAAK1C,SAAV,EAAqB;AACrB,cAAIc,GAAG,GAAG,KAAKP,IAAL,CAAUoC,WAAV,EAAV;AACA7B,UAAAA,GAAG,CAACI,CAAJ,IAAS,KAAKpB,MAAd;AACA,eAAKS,IAAL,CAAUqC,WAAV,CAAsB9B,GAAtB;AACH;;AAnEsC,O","sourcesContent":["import { _decorator, Component, Node, Collider2D, IPhysics2DContact, v3, tween, UITransformComponent, RigidBody2D, BoxCollider2D, math, ERigidBody2DType } from 'cc';\r\nimport { clientEvent } from '../../framework/clientEvent';\r\nimport { Constant } from '../../framework/constant';\r\nimport { baseCollider } from '../collider/baseCollider';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('mushroom')\r\nexport class mushroom extends baseCollider {\r\n    private _speed: number = 1;\r\n    private _normalX: number = 0;\r\n    private _isActive: boolean = false;\r\n    private _group: number = 0;\r\n    start() {\r\n        super.start();\r\n        this._addListener();\r\n        this._init();\r\n    }\r\n    private _addListener() {\r\n    }\r\n\r\n    onDestroy() {\r\n    }\r\n\r\n    private _init() {\r\n        this._speed = Constant.MoveSpeed / 3;\r\n        this.node.setScale(v3(Constant.MapScale, Constant.MapScale, 1));\r\n        let bc = this.node.getComponent(BoxCollider2D);\r\n        this._group = bc.group;\r\n        this._removePhysics();\r\n        let pos = this.node.getWorldPosition();\r\n        let height = this.node.getComponent(UITransformComponent).height * Constant.MapScale;\r\n        this.node.setWorldPosition(v3(pos.x, pos.y - (height / Constant.MapScale), pos.z));\r\n        pos = this.node.getWorldPosition();\r\n        this.node.setWorldPosition(v3(pos.x, pos.y - (height), pos.z))\r\n        // this.node.setSiblingIndex(3);\r\n\r\n        tween(this.node).to(1, { worldPosition: v3(pos.x, pos.y, pos.z) }).call(() => {\r\n            this._addPhysics();\r\n        }).start();\r\n    }\r\n\r\n    private _removePhysics() {\r\n        let rb = this.node.getComponent(RigidBody2D);\r\n        rb.type = ERigidBody2DType.Static;\r\n    }\r\n\r\n    private _addPhysics() {\r\n        let rb = this.node.getComponent(RigidBody2D);\r\n        rb.type = ERigidBody2DType.Dynamic;\r\n        this._isActive = true;\r\n    }\r\n\r\n    public onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        // 只在两个碰撞体开始接触时被调用一次\r\n        let name1 = selfCollider.node.name;\r\n        let name2 = otherCollider.node.name;\r\n        if (name1.includes(\"mushroom\")) {\r\n            let normal = contact.getWorldManifold().normal;\r\n            this._evtMushroomMove(normal.x);\r\n        }\r\n    }\r\n\r\n    private _evtMushroomMove(offset: number) {\r\n        if (offset != this._normalX) {\r\n            this._speed *= -1;\r\n            this._normalX = offset;\r\n        }\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        if (!this._isActive) return;\r\n        let pos = this.node.getPosition();\r\n        pos.x += this._speed;\r\n        this.node.setPosition(pos);\r\n    }\r\n}\r\n\r\n"]}