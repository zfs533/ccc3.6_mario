{"version":3,"sources":["file:///D:/CocosDashboard/resources/.editors/Creator/3.6.0/resources/app.asar.unpacked/modules/editor-extensions/extensions/localization-editor/node_modules/@formatjs/intl-numberformat/node_modules/@formatjs/ecma402-abstract/NumberFormat/ComputeExponentForMagnitude.js"],"names":["_cjsLoader","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","Object","defineProperty","value","ComputeExponentForMagnitude","numberFormat","magnitude","_a","getInternalSlots","internalSlots","notation","dataLocaleData","numberingSystem","Math","floor","compactDisplay","style","currencyDisplay","thresholdMap","currency","numbers","nu","short","decimal","long","num","String","pow","thresholds","keys","length","i","indexOf","magnitudeKey","compactPattern","other","match","_cjsExports","___esModule","__esModule","_ComputeExponentForMagnitude"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nlet _cjsExports;\nlet ___esModule;\nlet _ComputeExponentForMagnitude;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n Object.defineProperty(exports, \"__esModule\", { value: true });\n exports.ComputeExponentForMagnitude = void 0;\n /**\n  * The abstract operation ComputeExponentForMagnitude computes an exponent by which to scale a\n  * number of the given magnitude (power of ten of the most significant digit) according to the\n  * locale and the desired notation (scientific, engineering, or compact).\n  */\n function ComputeExponentForMagnitude(numberFormat, magnitude, _a) {\n     var getInternalSlots = _a.getInternalSlots;\n     var internalSlots = getInternalSlots(numberFormat);\n     var notation = internalSlots.notation, dataLocaleData = internalSlots.dataLocaleData, numberingSystem = internalSlots.numberingSystem;\n     switch (notation) {\n         case 'standard':\n             return 0;\n         case 'scientific':\n             return magnitude;\n         case 'engineering':\n             return Math.floor(magnitude / 3) * 3;\n         default: {\n             // Let exponent be an implementation- and locale-dependent (ILD) integer by which to scale a\n             // number of the given magnitude in compact notation for the current locale.\n             var compactDisplay = internalSlots.compactDisplay, style = internalSlots.style, currencyDisplay = internalSlots.currencyDisplay;\n             var thresholdMap = void 0;\n             if (style === 'currency' && currencyDisplay !== 'name') {\n                 var currency = dataLocaleData.numbers.currency[numberingSystem] ||\n                     dataLocaleData.numbers.currency[dataLocaleData.numbers.nu[0]];\n                 thresholdMap = currency.short;\n             }\n             else {\n                 var decimal = dataLocaleData.numbers.decimal[numberingSystem] ||\n                     dataLocaleData.numbers.decimal[dataLocaleData.numbers.nu[0]];\n                 thresholdMap = compactDisplay === 'long' ? decimal.long : decimal.short;\n             }\n             if (!thresholdMap) {\n                 return 0;\n             }\n             var num = String(Math.pow(10, magnitude));\n             var thresholds = Object.keys(thresholdMap); // TODO: this can be pre-processed\n             if (num < thresholds[0]) {\n                 return 0;\n             }\n             if (num > thresholds[thresholds.length - 1]) {\n                 return thresholds[thresholds.length - 1].length - 1;\n             }\n             var i = thresholds.indexOf(num);\n             if (i === -1) {\n                 return 0;\n             }\n             // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats\n             // Special handling if the pattern is precisely `0`.\n             var magnitudeKey = thresholds[i];\n             // TODO: do we need to handle plural here?\n             var compactPattern = thresholdMap[magnitudeKey].other;\n             if (compactPattern === '0') {\n                 return 0;\n             }\n             // Example: in zh-TW, `10000000` maps to `0000Ëê¨`. So we need to return 8 - 4 = 4 here.\n             return (magnitudeKey.length -\n                 thresholdMap[magnitudeKey].other.match(/0+/)[0].length);\n         }\n     }\n }\n exports.ComputeExponentForMagnitude = ComputeExponentForMagnitude;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n___esModule = module.exports.__esModule;\n_ComputeExponentForMagnitude = module.exports.ComputeExponentForMagnitude;\n\n}, {});\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}