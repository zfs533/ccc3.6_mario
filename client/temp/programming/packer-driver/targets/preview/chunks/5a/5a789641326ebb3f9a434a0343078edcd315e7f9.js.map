{"version":3,"sources":["file:///E:/CocosCreator/git/mario/client/assets/script/game/pieces/hole.ts"],"names":["_decorator","Enum","RigidBody2D","EnumHole","baseCollider","ccclass","property","hole","type","start","rb2d","node","getComponent","enabledContactListener","onBeginContact","selfCollider","otherCollider","contact","name1","name","name2","_onEndContact","normal"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAA6BC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,W,OAAAA,W;;AACnCC,MAAAA,Q,iBAAAA,Q;;AACAC,MAAAA,Y,iBAAAA,Y;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;sBAGjBO,I,WADZF,OAAO,CAAC,MAAD,C,UAGHC,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEP,IAAI;AAAA;AAAA;AAAZ,OAAD,C,2BAHb,MACaM,IADb;AAAA;AAAA,wCACuC;AAAA;AAAA;;AAAA;AAAA;;AAKnCE,QAAAA,KAAK,GAAG;AACJ,gBAAMA,KAAN;AACA,cAAIC,IAAkB,GAAG,KAAKC,IAAL,CAAUC,YAAV,CAAuBV,WAAvB,CAAzB;AACAQ,UAAAA,IAAI,CAACG,sBAAL,GAA8B,IAA9B;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACWC,QAAAA,cAAc,CAACC,YAAD,EAA2BC,aAA3B,EAAsDC,OAAtD,EAAyF;AAC1G;AACA,cAAIC,KAAK,GAAGH,YAAY,CAACJ,IAAb,CAAkBQ,IAA9B;AACA,cAAIC,KAAK,GAAGJ,aAAa,CAACL,IAAd,CAAmBQ,IAA/B;AACH;;AAEOE,QAAAA,aAAa,CAACN,YAAD,EAA2BC,aAA3B,EAAsDC,OAAtD,EAAyF,CAC1G;AACA;AACH;;AA1BkC,O;;;;;iBAGlB;AAAA;AAAA,oCAASK,M","sourcesContent":["import { _decorator, Component, Node, Enum, RigidBody2D, Collider2D, IPhysics2DContact } from 'cc';\r\nimport { EnumHole } from '../../framework/enum';\r\nimport { baseCollider } from '../collider/baseCollider';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('hole')\r\nexport class hole extends baseCollider {\r\n\r\n    @property({ type: Enum(EnumHole) })\r\n    type: EnumHole = EnumHole.normal;\r\n\r\n    start() {\r\n        super.start();\r\n        let rb2d : RigidBody2D = this.node.getComponent(RigidBody2D)\r\n        rb2d.enabledContactListener = true;\r\n    }\r\n\r\n    /**\r\n     * 子类重写\r\n     * @param selfCollider \r\n     * @param otherCollider \r\n     * @param contact \r\n     */\r\n    public onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        // 只在两个碰撞体开始接触时被调用一次\r\n        let name1 = selfCollider.node.name;\r\n        let name2 = otherCollider.node.name;\r\n    }\r\n    \r\n    private _onEndContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        // 只在两个碰撞体结束接触时被调用一次\r\n        // console.log('onEndContact');\r\n    }\r\n}\r\n\r\n"]}