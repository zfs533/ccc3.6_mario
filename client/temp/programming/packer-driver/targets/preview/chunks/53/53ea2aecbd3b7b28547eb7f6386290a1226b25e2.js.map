{"version":3,"sources":["file:///D:/CocosDashboard/resources/.editors/Creator/3.6.0/resources/app.asar.unpacked/modules/editor-extensions/extensions/localization-editor/node_modules/@formatjs/intl-locale/node_modules/@formatjs/ecma402-abstract/NumberFormat/format_to_parts.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","url","define","exports","require","module","__filename","__dirname","Object","defineProperty","value","ToRawFixed_1","digit_mapping_generated_1","regex_generated_1","CARET_S_UNICODE_REGEX","RegExp","concat","S_UNICODE_REGEX","source","S_DOLLAR_UNICODE_REGEX","CLDR_NUMBER_PATTERN","formatToParts","numberResult","data","pl","options","sign","exponent","magnitude","notation","style","numberingSystem","defaultNumberingSystem","numbers","nu","compactNumberPattern","getCompactDisplayPattern","compactDisplay","currencyDisplay","nonNameCurrencyPart","byCurrencyDisplay","currencies","currency","symbol","narrow","numberPattern","decimalData","decimal","getPatternForSign","standard","currencyData","currencySign","percentPattern","percent","decimalNumberPattern","exec","replace","afterCurrency","currencySpacing","afterInsertBetween","test","beforeCurrency","beforeInsertBetween","numberPatternParts","split","numberParts","symbols","_i","numberPatternParts_1","length","part","push","apply","paritionNumberIntoParts","useGrouping","type","minusSign","plusSign","percentSign","substring","unitPattern","unitName","currencyNameData","selectPlural","roundedNumber","Math","pow","displayName","unitPatternParts","result","_a","unitPatternParts_1","unit","unitDisplay","unitData","units","simple","_b","numeratorUnit","denominatorUnit","numeratorUnitPattern","perUnitPattern","perUnit","perPattern","compound","per","denominatorPattern","_c","_d","interpolateMatch","default","n","formattedString","x","isNaN","isFinite","digitReplacementTable","digitMapping","digit","decimalSepIndex","indexOf","integer","fraction","slice","groupSepSymbol","group","groups","integerNumberPattern","patternGroups","primaryGroupingSize","secondaryGroupingSize","i","integerGroup","pop","undefined","exponential","exponentResult","ToRawFixed","pattern","zeroPattern","negativePattern","magnitudeKey","String","byNumberingSystem","compactPluralRules","short","byCompactDisplay","compactPlaralRule","rules","select","other","_cjsExports","___esModule","__esModule","_default"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './ToRawFixed';\nimport { __cjsMetaURL as _req0} from './digit-mapping.generated';\nimport { __cjsMetaURL as _req1} from '../regex.generated';\nlet _cjsExports;\nlet ___esModule;\nlet _default;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n Object.defineProperty(exports, \"__esModule\", { value: true });\n var ToRawFixed_1 = require(\"./ToRawFixed\");\n var digit_mapping_generated_1 = require(\"./digit-mapping.generated\");\n var regex_generated_1 = require(\"../regex.generated\");\n // This is from: unicode-12.1.0/General_Category/Symbol/regex.js\n // IE11 does not support unicode flag, otherwise this is just /\\p{S}/u.\n // /^\\p{S}/u\n var CARET_S_UNICODE_REGEX = new RegExp(\"^\".concat(regex_generated_1.S_UNICODE_REGEX.source));\n // /\\p{S}$/u\n var S_DOLLAR_UNICODE_REGEX = new RegExp(\"\".concat(regex_generated_1.S_UNICODE_REGEX.source, \"$\"));\n var CLDR_NUMBER_PATTERN = /[#0](?:[\\.,][#0]+)*/g;\n function formatToParts(numberResult, data, pl, options) {\n     var sign = numberResult.sign, exponent = numberResult.exponent, magnitude = numberResult.magnitude;\n     var notation = options.notation, style = options.style, numberingSystem = options.numberingSystem;\n     var defaultNumberingSystem = data.numbers.nu[0];\n     // #region Part 1: partition and interpolate the CLDR number pattern.\n     // ----------------------------------------------------------\n     var compactNumberPattern = null;\n     if (notation === 'compact' && magnitude) {\n         compactNumberPattern = getCompactDisplayPattern(numberResult, pl, data, style, options.compactDisplay, options.currencyDisplay, numberingSystem);\n     }\n     // This is used multiple times\n     var nonNameCurrencyPart;\n     if (style === 'currency' && options.currencyDisplay !== 'name') {\n         var byCurrencyDisplay = data.currencies[options.currency];\n         if (byCurrencyDisplay) {\n             switch (options.currencyDisplay) {\n                 case 'code':\n                     nonNameCurrencyPart = options.currency;\n                     break;\n                 case 'symbol':\n                     nonNameCurrencyPart = byCurrencyDisplay.symbol;\n                     break;\n                 default:\n                     nonNameCurrencyPart = byCurrencyDisplay.narrow;\n                     break;\n             }\n         }\n         else {\n             // Fallback for unknown currency\n             nonNameCurrencyPart = options.currency;\n         }\n     }\n     var numberPattern;\n     if (!compactNumberPattern) {\n         // Note: if the style is unit, or is currency and the currency display is name,\n         // its unit parts will be interpolated in part 2. So here we can fallback to decimal.\n         if (style === 'decimal' ||\n             style === 'unit' ||\n             (style === 'currency' && options.currencyDisplay === 'name')) {\n             // Shortcut for decimal\n             var decimalData = data.numbers.decimal[numberingSystem] ||\n                 data.numbers.decimal[defaultNumberingSystem];\n             numberPattern = getPatternForSign(decimalData.standard, sign);\n         }\n         else if (style === 'currency') {\n             var currencyData = data.numbers.currency[numberingSystem] ||\n                 data.numbers.currency[defaultNumberingSystem];\n             // We replace number pattern part with `0` for easier postprocessing.\n             numberPattern = getPatternForSign(currencyData[options.currencySign], sign);\n         }\n         else {\n             // percent\n             var percentPattern = data.numbers.percent[numberingSystem] ||\n                 data.numbers.percent[defaultNumberingSystem];\n             numberPattern = getPatternForSign(percentPattern, sign);\n         }\n     }\n     else {\n         numberPattern = compactNumberPattern;\n     }\n     // Extract the decimal number pattern string. It looks like \"#,##0,00\", which will later be\n     // used to infer decimal group sizes.\n     var decimalNumberPattern = CLDR_NUMBER_PATTERN.exec(numberPattern)[0];\n     // Now we start to substitute patterns\n     // 1. replace strings like `0` and `#,##0.00` with `{0}`\n     // 2. unquote characters (invariant: the quoted characters does not contain the special tokens)\n     numberPattern = numberPattern\n         .replace(CLDR_NUMBER_PATTERN, '{0}')\n         .replace(/'(.)'/g, '$1');\n     // Handle currency spacing (both compact and non-compact).\n     if (style === 'currency' && options.currencyDisplay !== 'name') {\n         var currencyData = data.numbers.currency[numberingSystem] ||\n             data.numbers.currency[defaultNumberingSystem];\n         // See `currencySpacing` substitution rule in TR-35.\n         // Here we always assume the currencyMatch is \"[:^S:]\" and surroundingMatch is \"[:digit:]\".\n         //\n         // Example 1: for pattern \"#,##0.00¤\" with symbol \"US$\", we replace \"¤\" with the symbol,\n         // but insert an extra non-break space before the symbol, because \"[:^S:]\" matches \"U\" in\n         // \"US$\" and \"[:digit:]\" matches the latn numbering system digits.\n         //\n         // Example 2: for pattern \"¤#,##0.00\" with symbol \"US$\", there is no spacing between symbol\n         // and number, because `$` does not match \"[:^S:]\".\n         //\n         // Implementation note: here we do the best effort to infer the insertion.\n         // We also assume that `beforeInsertBetween` and `afterInsertBetween` will never be `;`.\n         var afterCurrency = currencyData.currencySpacing.afterInsertBetween;\n         if (afterCurrency && !S_DOLLAR_UNICODE_REGEX.test(nonNameCurrencyPart)) {\n             numberPattern = numberPattern.replace('¤{0}', \"\\u00A4\".concat(afterCurrency, \"{0}\"));\n         }\n         var beforeCurrency = currencyData.currencySpacing.beforeInsertBetween;\n         if (beforeCurrency && !CARET_S_UNICODE_REGEX.test(nonNameCurrencyPart)) {\n             numberPattern = numberPattern.replace('{0}¤', \"{0}\".concat(beforeCurrency, \"\\u00A4\"));\n         }\n     }\n     // The following tokens are special: `{0}`, `¤`, `%`, `-`, `+`, `{c:...}.\n     var numberPatternParts = numberPattern.split(/({c:[^}]+}|\\{0\\}|[¤%\\-\\+])/g);\n     var numberParts = [];\n     var symbols = data.numbers.symbols[numberingSystem] ||\n         data.numbers.symbols[defaultNumberingSystem];\n     for (var _i = 0, numberPatternParts_1 = numberPatternParts; _i < numberPatternParts_1.length; _i++) {\n         var part = numberPatternParts_1[_i];\n         if (!part) {\n             continue;\n         }\n         switch (part) {\n             case '{0}': {\n                 // We only need to handle scientific and engineering notation here.\n                 numberParts.push.apply(numberParts, paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, \n                 // If compact number pattern exists, do not insert group separators.\n                 !compactNumberPattern && options.useGrouping, decimalNumberPattern));\n                 break;\n             }\n             case '-':\n                 numberParts.push({ type: 'minusSign', value: symbols.minusSign });\n                 break;\n             case '+':\n                 numberParts.push({ type: 'plusSign', value: symbols.plusSign });\n                 break;\n             case '%':\n                 numberParts.push({ type: 'percentSign', value: symbols.percentSign });\n                 break;\n             case '¤':\n                 // Computed above when handling currency spacing.\n                 numberParts.push({ type: 'currency', value: nonNameCurrencyPart });\n                 break;\n             default:\n                 if (/^\\{c:/.test(part)) {\n                     numberParts.push({\n                         type: 'compact',\n                         value: part.substring(3, part.length - 1),\n                     });\n                 }\n                 else {\n                     // literal\n                     numberParts.push({ type: 'literal', value: part });\n                 }\n                 break;\n         }\n     }\n     // #endregion\n     // #region Part 2: interpolate unit pattern if necessary.\n     // ----------------------------------------------\n     switch (style) {\n         case 'currency': {\n             // `currencyDisplay: 'name'` has similar pattern handling as units.\n             if (options.currencyDisplay === 'name') {\n                 var unitPattern = (data.numbers.currency[numberingSystem] ||\n                     data.numbers.currency[defaultNumberingSystem]).unitPattern;\n                 // Select plural\n                 var unitName = void 0;\n                 var currencyNameData = data.currencies[options.currency];\n                 if (currencyNameData) {\n                     unitName = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), currencyNameData.displayName);\n                 }\n                 else {\n                     // Fallback for unknown currency\n                     unitName = options.currency;\n                 }\n                 // Do {0} and {1} substitution\n                 var unitPatternParts = unitPattern.split(/(\\{[01]\\})/g);\n                 var result = [];\n                 for (var _a = 0, unitPatternParts_1 = unitPatternParts; _a < unitPatternParts_1.length; _a++) {\n                     var part = unitPatternParts_1[_a];\n                     switch (part) {\n                         case '{0}':\n                             result.push.apply(result, numberParts);\n                             break;\n                         case '{1}':\n                             result.push({ type: 'currency', value: unitName });\n                             break;\n                         default:\n                             if (part) {\n                                 result.push({ type: 'literal', value: part });\n                             }\n                             break;\n                     }\n                 }\n                 return result;\n             }\n             else {\n                 return numberParts;\n             }\n         }\n         case 'unit': {\n             var unit = options.unit, unitDisplay = options.unitDisplay;\n             var unitData = data.units.simple[unit];\n             var unitPattern = void 0;\n             if (unitData) {\n                 // Simple unit pattern\n                 unitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[unit][unitDisplay]);\n             }\n             else {\n                 // See: http://unicode.org/reports/tr35/tr35-general.html#perUnitPatterns\n                 // If cannot find unit in the simple pattern, it must be \"per\" compound pattern.\n                 // Implementation note: we are not following TR-35 here because we need to format to parts!\n                 var _b = unit.split('-per-'), numeratorUnit = _b[0], denominatorUnit = _b[1];\n                 unitData = data.units.simple[numeratorUnit];\n                 var numeratorUnitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[numeratorUnit][unitDisplay]);\n                 var perUnitPattern = data.units.simple[denominatorUnit].perUnit[unitDisplay];\n                 if (perUnitPattern) {\n                     // perUnitPattern exists, combine it with numeratorUnitPattern\n                     unitPattern = perUnitPattern.replace('{0}', numeratorUnitPattern);\n                 }\n                 else {\n                     // get compoundUnit pattern (e.g. \"{0} per {1}\"), repalce {0} with numerator pattern and {1} with\n                     // the denominator pattern in singular form.\n                     var perPattern = data.units.compound.per[unitDisplay];\n                     var denominatorPattern = selectPlural(pl, 1, data.units.simple[denominatorUnit][unitDisplay]);\n                     unitPattern = unitPattern = perPattern\n                         .replace('{0}', numeratorUnitPattern)\n                         .replace('{1}', denominatorPattern.replace('{0}', ''));\n                 }\n             }\n             var result = [];\n             // We need spacing around \"{0}\" because they are not treated as \"unit\" parts, but \"literal\".\n             for (var _c = 0, _d = unitPattern.split(/(\\s*\\{0\\}\\s*)/); _c < _d.length; _c++) {\n                 var part = _d[_c];\n                 var interpolateMatch = /^(\\s*)\\{0\\}(\\s*)$/.exec(part);\n                 if (interpolateMatch) {\n                     // Space before \"{0}\"\n                     if (interpolateMatch[1]) {\n                         result.push({ type: 'literal', value: interpolateMatch[1] });\n                     }\n                     // \"{0}\" itself\n                     result.push.apply(result, numberParts);\n                     // Space after \"{0}\"\n                     if (interpolateMatch[2]) {\n                         result.push({ type: 'literal', value: interpolateMatch[2] });\n                     }\n                 }\n                 else if (part) {\n                     result.push({ type: 'unit', value: part });\n                 }\n             }\n             return result;\n         }\n         default:\n             return numberParts;\n     }\n     // #endregion\n }\n exports.default = formatToParts;\n // A subset of https://tc39.es/ecma402/#sec-partitionnotationsubpattern\n // Plus the exponent parts handling.\n function paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, useGrouping, \n /**\n  * This is the decimal number pattern without signs or symbols.\n  * It is used to infer the group size when `useGrouping` is true.\n  *\n  * A typical value looks like \"#,##0.00\" (primary group size is 3).\n  * Some locales like Hindi has secondary group size of 2 (e.g. \"#,##,##0.00\").\n  */\n decimalNumberPattern) {\n     var result = [];\n     // eslint-disable-next-line prefer-const\n     var n = numberResult.formattedString, x = numberResult.roundedNumber;\n     if (isNaN(x)) {\n         return [{ type: 'nan', value: n }];\n     }\n     else if (!isFinite(x)) {\n         return [{ type: 'infinity', value: n }];\n     }\n     var digitReplacementTable = digit_mapping_generated_1.digitMapping[numberingSystem];\n     if (digitReplacementTable) {\n         n = n.replace(/\\d/g, function (digit) { return digitReplacementTable[+digit] || digit; });\n     }\n     // TODO: Else use an implementation dependent algorithm to map n to the appropriate\n     // representation of n in the given numbering system.\n     var decimalSepIndex = n.indexOf('.');\n     var integer;\n     var fraction;\n     if (decimalSepIndex > 0) {\n         integer = n.slice(0, decimalSepIndex);\n         fraction = n.slice(decimalSepIndex + 1);\n     }\n     else {\n         integer = n;\n     }\n     // #region Grouping integer digits\n     // The weird compact and x >= 10000 check is to ensure consistency with Node.js and Chrome.\n     // Note that `de` does not have compact form for thousands, but Node.js does not insert grouping separator\n     // unless the rounded number is greater than 10000:\n     //   NumberFormat('de', {notation: 'compact', compactDisplay: 'short'}).format(1234) //=> \"1234\"\n     //   NumberFormat('de').format(1234) //=> \"1.234\"\n     if (useGrouping && (notation !== 'compact' || x >= 10000)) {\n         var groupSepSymbol = symbols.group;\n         var groups = [];\n         // > There may be two different grouping sizes: The primary grouping size used for the least\n         // > significant integer group, and the secondary grouping size used for more significant groups.\n         // > If a pattern contains multiple grouping separators, the interval between the last one and the\n         // > end of the integer defines the primary grouping size, and the interval between the last two\n         // > defines the secondary grouping size. All others are ignored.\n         var integerNumberPattern = decimalNumberPattern.split('.')[0];\n         var patternGroups = integerNumberPattern.split(',');\n         var primaryGroupingSize = 3;\n         var secondaryGroupingSize = 3;\n         if (patternGroups.length > 1) {\n             primaryGroupingSize = patternGroups[patternGroups.length - 1].length;\n         }\n         if (patternGroups.length > 2) {\n             secondaryGroupingSize = patternGroups[patternGroups.length - 2].length;\n         }\n         var i = integer.length - primaryGroupingSize;\n         if (i > 0) {\n             // Slice the least significant integer group\n             groups.push(integer.slice(i, i + primaryGroupingSize));\n             // Then iteratively push the more signicant groups\n             // TODO: handle surrogate pairs in some numbering system digits\n             for (i -= secondaryGroupingSize; i > 0; i -= secondaryGroupingSize) {\n                 groups.push(integer.slice(i, i + secondaryGroupingSize));\n             }\n             groups.push(integer.slice(0, i + secondaryGroupingSize));\n         }\n         else {\n             groups.push(integer);\n         }\n         while (groups.length > 0) {\n             var integerGroup = groups.pop();\n             result.push({ type: 'integer', value: integerGroup });\n             if (groups.length > 0) {\n                 result.push({ type: 'group', value: groupSepSymbol });\n             }\n         }\n     }\n     else {\n         result.push({ type: 'integer', value: integer });\n     }\n     // #endregion\n     if (fraction !== undefined) {\n         result.push({ type: 'decimal', value: symbols.decimal }, { type: 'fraction', value: fraction });\n     }\n     if ((notation === 'scientific' || notation === 'engineering') &&\n         isFinite(x)) {\n         result.push({ type: 'exponentSeparator', value: symbols.exponential });\n         if (exponent < 0) {\n             result.push({ type: 'exponentMinusSign', value: symbols.minusSign });\n             exponent = -exponent;\n         }\n         var exponentResult = (0, ToRawFixed_1.ToRawFixed)(exponent, 0, 0);\n         result.push({\n             type: 'exponentInteger',\n             value: exponentResult.formattedString,\n         });\n     }\n     return result;\n }\n function getPatternForSign(pattern, sign) {\n     if (pattern.indexOf(';') < 0) {\n         pattern = \"\".concat(pattern, \";-\").concat(pattern);\n     }\n     var _a = pattern.split(';'), zeroPattern = _a[0], negativePattern = _a[1];\n     switch (sign) {\n         case 0:\n             return zeroPattern;\n         case -1:\n             return negativePattern;\n         default:\n             return negativePattern.indexOf('-') >= 0\n                 ? negativePattern.replace(/-/g, '+')\n                 : \"+\".concat(zeroPattern);\n     }\n }\n // Find the CLDR pattern for compact notation based on the magnitude of data and style.\n //\n // Example return value: \"¤ {c:laki}000;¤{c:laki} -0\" (`sw` locale):\n // - Notice the `{c:...}` token that wraps the compact literal.\n // - The consecutive zeros are normalized to single zero to match CLDR_NUMBER_PATTERN.\n //\n // Returning null means the compact display pattern cannot be found.\n function getCompactDisplayPattern(numberResult, pl, data, style, compactDisplay, currencyDisplay, numberingSystem) {\n     var _a;\n     var roundedNumber = numberResult.roundedNumber, sign = numberResult.sign, magnitude = numberResult.magnitude;\n     var magnitudeKey = String(Math.pow(10, magnitude));\n     var defaultNumberingSystem = data.numbers.nu[0];\n     var pattern;\n     if (style === 'currency' && currencyDisplay !== 'name') {\n         var byNumberingSystem = data.numbers.currency;\n         var currencyData = byNumberingSystem[numberingSystem] ||\n             byNumberingSystem[defaultNumberingSystem];\n         // NOTE: compact notation ignores currencySign!\n         var compactPluralRules = (_a = currencyData.short) === null || _a === void 0 ? void 0 : _a[magnitudeKey];\n         if (!compactPluralRules) {\n             return null;\n         }\n         pattern = selectPlural(pl, roundedNumber, compactPluralRules);\n     }\n     else {\n         var byNumberingSystem = data.numbers.decimal;\n         var byCompactDisplay = byNumberingSystem[numberingSystem] ||\n             byNumberingSystem[defaultNumberingSystem];\n         var compactPlaralRule = byCompactDisplay[compactDisplay][magnitudeKey];\n         if (!compactPlaralRule) {\n             return null;\n         }\n         pattern = selectPlural(pl, roundedNumber, compactPlaralRule);\n     }\n     // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats\n     // > If the value is precisely “0”, either explicit or defaulted, then the normal number format\n     // > pattern for that sort of object is supplied.\n     if (pattern === '0') {\n         return null;\n     }\n     pattern = getPatternForSign(pattern, sign)\n         // Extract compact literal from the pattern\n         .replace(/([^\\s;\\-\\+\\d¤]+)/g, '{c:$1}')\n         // We replace one or more zeros with a single zero so it matches `CLDR_NUMBER_PATTERN`.\n         .replace(/0+/, '0');\n     return pattern;\n }\n function selectPlural(pl, x, rules) {\n     return rules[pl.select(x)] || rules.other;\n }\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n___esModule = module.exports.__esModule;\n_default = module.exports.default;\n\n}, () => ({\n  './ToRawFixed': _req,\n  './digit-mapping.generated': _req0,\n  '../regex.generated': _req1,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}