{"version":3,"sources":["file:///D:/CocosDashboard/resources/.editors/Creator/3.6.0/resources/app.asar.unpacked/modules/editor-extensions/extensions/localization-editor/static/assets/components/icu-component.ts"],"names":["_decorator","ccclass","property","requireComponent","executeInEditMode","VirtualEnum"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;;;;;;;;;AAGT;AACA;AACA;AACA;OAEM;AACFC,QAAAA,OADE;AAEFC,QAAAA,QAFE;AAGFC,QAAAA,gBAHE;AAIFC,QAAAA;AAJE,O,GAKFJ,U;;iBAECK,W,MAAAA,W,KAAAA,W","sourcesContent":["import { _decorator, CCBoolean, CCInteger, CCString, Enum, Label } from 'cc';\n// @ts-ignore\nimport { EDITOR } from 'cc/env';\n// import ICUType from '../core/ICUType';\n// import I18nComponent from './I18nComponent';\n// import { DateTimeFormatOptions, NumberFormatOptions, RelativeTimeFormatOptions, RelativeTimeFormatUnit } from '../core/ICUOptions';\n// import intl from '../core/IntlManager';\n\nconst {\n    ccclass,\n    property,\n    requireComponent,\n    executeInEditMode,\n} = _decorator;\n\nenum VirtualEnum {}\n\n// @ccclass('ICUComponent')\n// @executeInEditMode(true)\n// @requireComponent(Label)\n// export default class ICUComponent extends I18nComponent {\n//     @property({ visible: false })\n//     _icuValue = '';\n//\n//     @property\n//     set icuValue(value: string) {\n//         this._icuValue = value;\n//         this.render();\n//     }\n//\n//     get icuValue(): string {\n//         return this._icuValue;\n//     }\n//\n//     @property({ visible: false })\n//         _type: ICUType = ICUType.DateTime;\n//\n//     @property({ visible: true, type: Enum(ICUType) })\n//     set type(value: ICUType) {\n//         this._type = value;\n//     }\n//\n//     get type(): ICUType {\n//         return this._type;\n//     }\n//\n//     protected onLoad() {\n//         super.onLoad();\n//         if (this.label && !this._icuValue) {\n//             this._icuValue = this.label.string;\n//         }\n//     }\n//\n//     protected start() {\n//         this.render();\n//     }\n//\n//     public render() {\n//         super.render();\n//         if (this._icuValue.length === 0) return;\n//         let translatedString!: string;\n//         try {\n//             switch (this.type) {\n//                 case ICUType.Number:\n//                     translatedString = intl.tn(parseFloat(this.icuValue), this.numberFormatOptions);\n//                     break;\n//                 case ICUType.DateTime:\n//                     translatedString = intl.td(new Date(this.icuValue), this.dateTimeFormatOptions);\n//                     break;\n//                 case ICUType.RelativeTime:\n//                     translatedString = intl.tt(\n//                         parseFloat(this.icuValue),\n//                         this.relativeTimeUnit,\n//                         this.relativeTimeFormatOptions,\n//                     );\n//                     break;\n//                 case ICUType.List: {\n//                     const icuList = this.icuValue.split(',');\n//                     translatedString = intl.tl(icuList);\n//                     break;\n//                 }\n//                 default:\n//                     break;\n//             }\n//         } catch (e) {\n//             translatedString = this._icuValue;\n//         }\n//         if (EDITOR) {\n//             this.preview(translatedString);\n//         } else {\n//             this.label!.string = translatedString;\n//         }\n//     }\n//\n//     // ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ auto generate by script don't edit ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n//     /************************** NumberFormatOptions **************************/\n//     @property({ visible: false })\n//         numberFormatOptions: NumberFormatOptions = { useGrouping: false };\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'Number',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.Number;\n//         },\n//     })\n//     set numberStyle(value: string) {\n//         this.numberFormatOptions.style = value;\n//         this.render();\n//     }\n//     get numberStyle(): string {\n//         return this.numberFormatOptions.style as string;\n//     }\n//\n//     @property({\n//         type: CCString,\n//         group: 'Number',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.Number;\n//         },\n//     })\n//     set currency(value: string) {\n//         this.numberFormatOptions.currency = value;\n//         this.render();\n//     }\n//     get currency(): string {\n//         return this.numberFormatOptions.currency as string;\n//     }\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'Number',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.Number;\n//         },\n//     })\n//     set currencySign(value: string) {\n//         this.numberFormatOptions.currencySign = value;\n//         this.render();\n//     }\n//     get currencySign(): string {\n//         return this.numberFormatOptions.currencySign as string;\n//     }\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'Number',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.Number;\n//         },\n//     })\n//     set currencyDisplay(value: string) {\n//         this.numberFormatOptions.currencyDisplay = value;\n//         this.render();\n//     }\n//     get currencyDisplay(): string {\n//         return this.numberFormatOptions.currencyDisplay as string;\n//     }\n//\n//     @property({\n//         type: CCBoolean,\n//         group: 'Number',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.Number;\n//         },\n//     })\n//     set useGrouping(value: boolean) {\n//         this.numberFormatOptions.useGrouping = value;\n//         this.render();\n//     }\n//     get useGrouping(): boolean {\n//         return this.numberFormatOptions.useGrouping as boolean;\n//     }\n//\n//     @property({\n//         type: CCInteger,\n//         group: 'Number',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.Number;\n//         },\n//     })\n//     set minimumIntegerDigits(value: number) {\n//         this.numberFormatOptions.minimumIntegerDigits = value;\n//         this.render();\n//     }\n//     get minimumIntegerDigits(): number {\n//         return this.numberFormatOptions.minimumIntegerDigits as number;\n//     }\n//\n//     @property({\n//         type: CCInteger,\n//         group: 'Number',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.Number;\n//         },\n//     })\n//     set minimumFractionDigits(value: number) {\n//         this.numberFormatOptions.minimumFractionDigits = value;\n//         this.render();\n//     }\n//     get minimumFractionDigits(): number {\n//         return this.numberFormatOptions.minimumFractionDigits as number;\n//     }\n//\n//     @property({\n//         type: CCInteger,\n//         group: 'Number',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.Number;\n//         },\n//     })\n//     set maximumFractionDigits(value: number) {\n//         this.numberFormatOptions.maximumFractionDigits = value;\n//         this.render();\n//     }\n//     get maximumFractionDigits(): number {\n//         return this.numberFormatOptions.maximumFractionDigits as number;\n//     }\n//\n//     @property({\n//         type: CCInteger,\n//         group: 'Number',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.Number;\n//         },\n//     })\n//     set minimumSignificantDigits(value: number) {\n//         this.numberFormatOptions.minimumSignificantDigits = value;\n//         this.render();\n//     }\n//     get minimumSignificantDigits(): number {\n//         return this.numberFormatOptions.minimumSignificantDigits as number;\n//     }\n//\n//     @property({\n//         type: CCInteger,\n//         group: 'Number',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.Number;\n//         },\n//     })\n//     set maximumSignificantDigits(value: number) {\n//         this.numberFormatOptions.maximumSignificantDigits = value;\n//         this.render();\n//     }\n//     get maximumSignificantDigits(): number {\n//         return this.numberFormatOptions.maximumSignificantDigits as number;\n//     }\n//\n//     /************************** DateTimeFormatOptions **************************/\n//     @property({ visible: false })\n//         dateTimeFormatOptions: DateTimeFormatOptions = {};\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'DateTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.DateTime;\n//         },\n//     })\n//     set dateTimeLocaleMatcher(value: string) {\n//         this.dateTimeFormatOptions.localeMatcher = value;\n//         this.render();\n//     }\n//     get dateTimeLocaleMatcher(): string {\n//         return this.dateTimeFormatOptions.localeMatcher as string;\n//     }\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'DateTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.DateTime;\n//         },\n//     })\n//     set weekday(value: string) {\n//         this.dateTimeFormatOptions.weekday = value;\n//         this.render();\n//     }\n//     get weekday(): string {\n//         return this.dateTimeFormatOptions.weekday as string;\n//     }\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'DateTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.DateTime;\n//         },\n//     })\n//     set era(value: string) {\n//         this.dateTimeFormatOptions.era = value;\n//         this.render();\n//     }\n//     get era(): string {\n//         return this.dateTimeFormatOptions.era as string;\n//     }\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'DateTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.DateTime;\n//         },\n//     })\n//     set year(value: string) {\n//         this.dateTimeFormatOptions.year = value;\n//         this.render();\n//     }\n//     get year(): string {\n//         return this.dateTimeFormatOptions.year as string;\n//     }\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'DateTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.DateTime;\n//         },\n//     })\n//     set month(value: string) {\n//         this.dateTimeFormatOptions.month = value;\n//         this.render();\n//     }\n//     get month(): string {\n//         return this.dateTimeFormatOptions.month as string;\n//     }\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'DateTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.DateTime;\n//         },\n//     })\n//     set day(value: string) {\n//         this.dateTimeFormatOptions.day = value;\n//         this.render();\n//     }\n//     get day(): string {\n//         return this.dateTimeFormatOptions.day as string;\n//     }\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'DateTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.DateTime;\n//         },\n//     })\n//     set hour(value: string) {\n//         this.dateTimeFormatOptions.hour = value;\n//         this.render();\n//     }\n//     get hour(): string {\n//         return this.dateTimeFormatOptions.hour as string;\n//     }\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'DateTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.DateTime;\n//         },\n//     })\n//     set minute(value: string) {\n//         this.dateTimeFormatOptions.minute = value;\n//         this.render();\n//     }\n//     get minute(): string {\n//         return this.dateTimeFormatOptions.minute as string;\n//     }\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'DateTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.DateTime;\n//         },\n//     })\n//     set second(value: string) {\n//         this.dateTimeFormatOptions.second = value;\n//         this.render();\n//     }\n//     get second(): string {\n//         return this.dateTimeFormatOptions.second as string;\n//     }\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'DateTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.DateTime;\n//         },\n//     })\n//     set timeZoneName(value: string) {\n//         this.dateTimeFormatOptions.timeZoneName = value;\n//         this.render();\n//     }\n//     get timeZoneName(): string {\n//         return this.dateTimeFormatOptions.timeZoneName as string;\n//     }\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'DateTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.DateTime;\n//         },\n//     })\n//     set formatMatcher(value: string) {\n//         this.dateTimeFormatOptions.formatMatcher = value;\n//         this.render();\n//     }\n//     get formatMatcher(): string {\n//         return this.dateTimeFormatOptions.formatMatcher as string;\n//     }\n//\n//     @property({\n//         type: CCBoolean,\n//         group: 'DateTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.DateTime;\n//         },\n//     })\n//     set hour12(value: boolean) {\n//         this.dateTimeFormatOptions.hour12 = value;\n//         this.render();\n//     }\n//     get hour12(): boolean {\n//         return this.dateTimeFormatOptions.hour12 as boolean;\n//     }\n//\n//     @property({\n//         type: CCString,\n//         group: 'DateTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.DateTime;\n//         },\n//     })\n//     set timeZone(value: string) {\n//         this.dateTimeFormatOptions.timeZone = value;\n//         this.render();\n//     }\n//     get timeZone(): string {\n//         return this.dateTimeFormatOptions.timeZone as string;\n//     }\n//\n//     /************************** RelativeTimeOptions **************************/\n//     @property({ visible: false })\n//         relativeTimeFormatOptions: RelativeTimeFormatOptions = {};\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'RelativeTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.RelativeTime;\n//         },\n//     })\n//     set relativeTimeLocaleMatcher(value: string) {\n//         this.relativeTimeFormatOptions.localeMatcher = value;\n//         this.render();\n//     }\n//     get relativeTimeLocaleMatcher(): string {\n//         return this.relativeTimeFormatOptions.localeMatcher as string;\n//     }\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'RelativeTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.RelativeTime;\n//         },\n//     })\n//     set numeric(value: string) {\n//         this.relativeTimeFormatOptions.numeric = value;\n//         this.render();\n//     }\n//     get numeric(): string {\n//         return this.relativeTimeFormatOptions.numeric as string;\n//     }\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'RelativeTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.RelativeTime;\n//         },\n//     })\n//     set relativeTimeStyle(value: string) {\n//         this.relativeTimeFormatOptions.style = value;\n//         this.render();\n//     }\n//     get relativeTimeStyle(): string {\n//         return this.relativeTimeFormatOptions.style as string;\n//     }\n//\n//     @property({ visible: false })\n//         _relativeTimeUnit: RelativeTimeFormatUnit = 'second';\n//\n//     @property({\n//         type: Enum(VirtualEnum),\n//         group: 'RelativeTime',\n//         visible(this: ICUComponent) {\n//             return this.type === ICUType.RelativeTime;\n//         },\n//     })\n//     set relativeTimeUnit(value: string) {\n//         this._relativeTimeUnit = value;\n//         this.render();\n//     }\n//     get relativeTimeUnit(): string {\n//         return this._relativeTimeUnit;\n//     }\n//\n//     // ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ auto generate by script don't edit ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n// }\n"]}