{"version":3,"sources":["file:///E:/CocosCreator/mario/ccc3.6_mario/client/assets/script/net/net.ts"],"names":["ChessNet","DataViewUtils","Router","getIp","IpType","clientEvent","user","socket","id","serverType","isConnected","Inst","_instance","init","cb","ip","local","console","log","WebSocket","binaryType","onopen","onclose","onerror","onmessage","req","message","data","buf","Uint8Array","buffer","dtView","DataView","head","getHeadData","body","decoding","byteLength","router","JSON","stringify","handleRecvdate","breakConnect","close","dispatchEvent","rut_upLineSelf","sendMsg","dt","encoding","Number","send","Net"],"mappings":"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","sourcesContent":["import DataViewUtils from \"./dataviewUtils\";\r\nimport { Router } from \"./routers\";\r\nimport { Head, ModelAny } from \"./globalUtils\";\r\nimport { getIp, IpType } from \"./util\";\r\nimport { clientEvent } from \"../framework/clientEvent\";\r\nimport { user } from \"../game/common/user\";\r\n\r\nexport default class ChessNet {\r\n    private socket: WebSocket = null as unknown as WebSocket;\r\n    private id: number = 0;\r\n    private serverType: number = 0;\r\n    public isConnected: boolean = false;\r\n\r\n    private static _instance: ChessNet = null;\r\n    public static get Inst(): ChessNet {\r\n        if (!this._instance) {\r\n            this._instance = new ChessNet();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    /**\r\n     * 初始化连接服务器\r\n     * @param cb \r\n     */\r\n    init(cb?: any) {\r\n        let ip = getIp(IpType.local);\r\n        console.log(ip)\r\n        this.socket = new WebSocket(ip);\r\n        this.socket.binaryType = \"arraybuffer\";\r\n        this.socket.onopen = () => {\r\n            this.isConnected = true;\r\n            console.log(\"--------connect success---------\");\r\n            if (cb) { cb(); }\r\n        };\r\n        this.socket.onclose = () => { console.log(\"close\"); this.isConnected = false; };\r\n        this.socket.onerror = () => { console.log(\"onerror\") };\r\n        this.socket.onmessage = (req) => {\r\n            let message = req.data;\r\n            let buf = new Uint8Array(message).buffer;\r\n            let dtView = new DataView(buf);\r\n            let head = DataViewUtils.getHeadData(dtView);\r\n            let body = DataViewUtils.decoding(dtView, buf.byteLength);\r\n\r\n            console.log(\"------------------receiveData------------------\");\r\n            console.log(\"router:\" + head.router + \" body:\" + JSON.stringify(body));\r\n            this.handleRecvdate(head, body);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 主动断开与服务器间的链接\r\n     */\r\n    breakConnect() {\r\n        this.socket.close();\r\n    }\r\n\r\n    /**\r\n     * 接收数据，将数据派发出去\r\n     * @param head \r\n     * @param body \r\n     */\r\n    handleRecvdate(head: Head, body: any) {\r\n        clientEvent.dispatchEvent(head.router, body);\r\n        switch (head.router) {\r\n            case Router.rut_upLineSelf:\r\n                user.id = body.id;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 向服务器发送数据\r\n     * @param data \r\n     * @param router \r\n     */\r\n    sendMsg(data: any, router: string) {\r\n        console.log(\"------------------sendData------------------\");\r\n        console.log(data, router);\r\n        let dt = DataViewUtils.encoding(this.id, this.serverType, Number(router), data);\r\n        this.socket.send(dt);\r\n    }\r\n}\r\n\r\nexport const Net = new ChessNet();"]}