{"version":3,"sources":["file:///E:/CocosCreator/git/mario/client/assets/script/game/roles/roleManager.ts"],"names":["_decorator","instantiate","Vec3","UITransform","cfgLevel","clientEvent","Constant","RoleEnum","resourceUtil","ccclass","property","roleManager","_map","_initRolePos","_initEnemyPos","bigLevel","smallLevel","sonLevel","levelData","levelList","alivePoint","_isNext","isInHole","holeMapData","Inst","_instance","init","map","addMarioToMap","data","setInitRolePos","loadRole","mario","outPos","reLifePos","addEnemyToMap","enemyBlack","name","pos","pre","loadPiecesPriefabRes","node","addChildToMap","setPosition","dispatchEvent","EVENT_TYPE","InitCameraPos","updateAlivePoint","rolePos","posCfg","i","length","x","nextLevel","cfgLevelData","small","key","lv1","Number","lv2","setHoleInfo","startTranslateScene","TranslateScenes","convertToNodeSpace","getWorldPosition","resPos","getComponent","convertToNodeSpaceAR"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, instantiate, Vec3, UITransform } from 'cc';\r\nimport cfgLevel from '../../config/cfgLevel';\r\nimport { clientEvent } from '../../framework/clientEvent';\r\nimport { Constant } from '../../framework/constant';\r\nimport { RoleEnum } from '../../framework/enum';\r\nimport { resourceUtil } from '../../framework/resourceUtil';\r\nimport { map } from '../ui/map/map';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('roleManager')\r\nexport class roleManager {\r\n    private _map: map;\r\n    private _initRolePos = new Vec3();//角色初始化默认位置\r\n    private _initEnemyPos = new Vec3(1000, 20.5, 0);//角色初始化默认位置\r\n    private static _instance: roleManager;\r\n    public bigLevel:string = \"1\";   //大关卡\r\n    public smallLevel:string = \"1\"; //小关卡\r\n    public sonLevel:number = 0;     //小关卡中的关卡\r\n    public levelData = null;        //当前所在关卡地图数据\r\n    private levelList = [];         //当前小关卡中的不同场景地图列表\r\n    public alivePoint:number = 0;\r\n    private _isNext:Boolean = false;//防止多次切换地图\r\n    public isInHole:Boolean = false;//是否是在井里出来，决定出身点的设置\r\n    public holeMapData:any = null;      //下井后的地图\r\n    public static get Inst(): roleManager {\r\n        if (!this._instance) {\r\n            this._instance = new roleManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n    public init(map: map) {\r\n        this._map = map;\r\n        this._isNext = false;\r\n    }\r\n\r\n    /**\r\n     * 加载mario到场景地图中\r\n     */\r\n    public addMarioToMap() {\r\n        this.levelList = cfgLevel.data[this.bigLevel][this.smallLevel]\r\n        this.levelData = this.levelList[this.sonLevel];\r\n        this.setInitRolePos();\r\n        // this._initRolePos = this.levelData.reLifePos[this.alivePoint];\r\n        this.loadRole(RoleEnum.mario, this._initRolePos);\r\n    }\r\n\r\n    public setInitRolePos(){\r\n        if(this.isInHole){\r\n            this._initRolePos = this.holeMapData.outPos();\r\n        }\r\n        else{\r\n            this._initRolePos = this.levelData.reLifePos[this.alivePoint];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载monster到场景地图中\r\n     */\r\n    public addEnemyToMap() {\r\n        this.loadRole(RoleEnum.enemyBlack, this._initEnemyPos);\r\n    }\r\n\r\n    /**\r\n     * 动态加载角色\r\n     * @param na0me \r\n     * @param pos \r\n     */\r\n    private async loadRole(name: string, pos: Vec3) {\r\n        let pre = await resourceUtil.loadPiecesPriefabRes(name)\r\n        if (pre) {\r\n            //加载金币并发送消除金币事件\r\n            let node = instantiate(pre) as Node;\r\n            node.name = name;\r\n            this._map.addChildToMap(node);\r\n            // this._map.node.addChild(node);\r\n            node.setPosition(pos);\r\n            clientEvent.dispatchEvent(Constant.EVENT_TYPE.InitCameraPos,this._initRolePos);\r\n        }\r\n    }\r\n\r\n    public updateAlivePoint(rolePos:Vec3){\r\n        let posCfg = this.levelData.reLifePos;\r\n        for(let i = 0 ;i <posCfg.length;i++){\r\n            if(rolePos.x>posCfg[i].x){\r\n                this.alivePoint = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    //切换下一关或隐藏小关卡\r\n    public nextLevel(){\r\n        if(this._isNext)return;\r\n        this._isNext = true;\r\n        let length = this.levelList.length;\r\n        let cfgLevelData = cfgLevel.data;\r\n        let smallLevel = \"no\";\r\n        let bigLevel = \"no\";\r\n        if(this.sonLevel+1 == length){//小关中再无其他地图\r\n            this.sonLevel = 0;\r\n            let small = cfgLevelData[this.bigLevel];\r\n            for(let key in small){\r\n                let lv1 = Number(this.smallLevel);\r\n                let lv2 = Number(key);\r\n                if(lv1 + 1 == lv2){\r\n                   smallLevel = key;//进入下一个小关卡\r\n                   this.smallLevel = key;\r\n                   break;\r\n                }\r\n            }\r\n            if(smallLevel == \"no\"){\r\n                this.smallLevel = \"1\";\r\n                for(let key in cfgLevelData){\r\n                    let lv1 = Number(this.bigLevel);\r\n                    let lv2 = Number(key);\r\n                    if(lv1+1 == lv2){\r\n                        bigLevel = key;\r\n                        this.bigLevel = key;//下一个大关卡\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if(bigLevel == \"no\"){\r\n                this.bigLevel = \"1\";//通关了，回到1-1-1\r\n            }\r\n        }\r\n        else{\r\n            this.sonLevel++;\r\n        }\r\n        this.setHoleInfo();\r\n        this.startTranslateScene();\r\n    }\r\n\r\n    public startTranslateScene(){\r\n        clientEvent.dispatchEvent(Constant.EVENT_TYPE.TranslateScenes);\r\n    }\r\n\r\n    public setHoleInfo(data:any = null){\r\n        this.holeMapData = data;\r\n        this.isInHole = !!data;\r\n    }\r\n\r\n    //转换到节点坐标系\r\n    public convertToNodeSpace(node:Node){\r\n        let pos = node.getWorldPosition();\r\n        let resPos = this._map.node.getComponent(UITransform).convertToNodeSpaceAR(pos);\r\n        return resPos;\r\n    }\r\n}\r\n\r\n"]}