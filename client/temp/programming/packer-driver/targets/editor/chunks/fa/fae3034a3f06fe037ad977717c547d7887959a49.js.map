{"version":3,"sources":["file:///E:/CocosCreator/git/mario/client/assets/script/game/pieces/hole.ts"],"names":["_decorator","Enum","RigidBody2D","BoxCollider2D","Vec3","UITransform","cfgHole","clientEvent","Constant","EnumHole","EnumHoleMap","EnumPhysicsGroup","baseCollider","roleManager","ccclass","property","hole","type","_rb2d","_b2d","_pos1","_pos2","_holeMap","_isCanGo","onLoad","on","EVENT_TYPE","HoleGetDown","_beginHoleGo","onDestroy","off","start","getHoleMapDown","holeMapIndex","rb2d","node","getComponent","enabledContactListener","group","b2d","onBeginContact","selfCollider","otherCollider","contact","canDown","Inst","convertToNodeSpace","y","transform","x","width","enabled","_startGo","canLeftIn","setMapData","startTranslateScene","normal","nono"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Enum, RigidBody2D, Collider2D, IPhysics2DContact, BoxCollider2D, Vec3, UITransform } from 'cc';\r\nimport cfgHole from '../../config/cfgHole';\r\nimport { clientEvent } from '../../framework/clientEvent';\r\nimport { Constant } from '../../framework/constant';\r\nimport { EnumHole, EnumHoleMap, EnumPhysicsGroup } from '../../framework/enum';\r\nimport { baseCollider } from '../collider/baseCollider';\r\nimport { roleManager } from '../roles/roleManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('hole')\r\nexport class hole extends baseCollider {\r\n\r\n    @property({ type: Enum(EnumHole) })\r\n    type: EnumHole = EnumHole.normal;\r\n\r\n    @property({type:Enum(EnumHoleMap)})\r\n    holeMapIndex:EnumHoleMap = EnumHoleMap.nono;\r\n\r\n    private _rb2d:RigidBody2D;\r\n    private _b2d:BoxCollider2D;\r\n    private _pos1:Vec3 = new Vec3();\r\n    private _pos2:Vec3 = new Vec3();\r\n    private _holeMap : any;\r\n    private _isCanGo : Boolean = true;\r\n    \r\n    onLoad(){\r\n        clientEvent.on(Constant.EVENT_TYPE.HoleGetDown,this._beginHoleGo,this);\r\n    }\r\n\r\n    onDestroy(){\r\n        clientEvent.off(Constant.EVENT_TYPE.HoleGetDown,this._beginHoleGo,this);\r\n    }\r\n\r\n    start() {\r\n        super.start();\r\n        this._holeMap = cfgHole.getHoleMapDown(this.holeMapIndex);\r\n        let rb2d : RigidBody2D = this.node.getComponent(RigidBody2D)\r\n        rb2d.enabledContactListener = true;\r\n        rb2d.group = EnumPhysicsGroup.hole;\r\n        \r\n        let b2d:BoxCollider2D = this.node.getComponent(BoxCollider2D);\r\n        b2d.group = EnumPhysicsGroup.hole;\r\n\r\n        this._rb2d = rb2d;\r\n        this._b2d  = b2d;\r\n    }\r\n\r\n    /**\r\n     * 子类重写\r\n     * @param selfCollider \r\n     * @param otherCollider \r\n     * @param contact \r\n     */\r\n    public onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        if(this.type == EnumHole.canDown){\r\n            this._pos1 = roleManager.Inst.convertToNodeSpace(selfCollider.node);\r\n            this._pos2 = roleManager.Inst.convertToNodeSpace(otherCollider.node);\r\n            this._beginHoleGo();\r\n        }\r\n    }\r\n\r\n    //点击向下键，遥感竖直向下进洞，TODO\r\n    private _beginHoleGo(){\r\n        if(this.type == EnumHole.canDown && this._isCanGo){\r\n            if(this._pos2.y>this._pos1.y){\r\n                let transform = this.node.getComponent(UITransform);\r\n                if(this._pos2.x >= this._pos1.x-transform.width/2 && this._pos2.x < this._pos1.x+transform.width/2){\r\n                    this._isCanGo = false;\r\n                    this._b2d.enabled = false;\r\n                    this._startGo();\r\n                }\r\n            }\r\n        }\r\n        else if(this.type ==  EnumHole.canLeftIn && this._isCanGo){\r\n            if(this._pos2.x<this._pos1.x && this._pos2.y < this._pos1.y){\r\n                this._isCanGo = false;\r\n                this._b2d.enabled = false;\r\n                this._startGo();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _startGo(){\r\n        roleManager.Inst.setMapData(this._holeMap);\r\n        roleManager.Inst.startTranslateScene()\r\n    }\r\n}\r\n\r\n"]}